#!/bin/bash
# shellcheck disable=SC2119
# shellcheck disable=SC2120
# shellcheck disable=SC2128

# Verifica se os comandos necessários estão disponíveis
if ! command -v ip >/dev/null || ! command -v nmcli >/dev/null; then
    echo "Erro: Este script requer 'iproute2' e 'NetworkManager'.."
    echo "Por favor, instale as dependências antes de executar o script."
    exit 1
fi

# Arquivo environment para configuração de IP FIXO para a Interface Bridge
if [ -f "/opt/bridge-set/bridge-set.conf" ]; then
    # shellcheck source=/dev/null
    source /opt/bridge-set/bridge-set.conf
fi

# Variávis para a configuração da Interface Bridge
bridge_options=("$1")
bridge_name="${bridge_name:-br0}"
bridge_ip="${bridge_ip:-$2}"
interfaces="${interfaces:-$3}"
bridge_mask=${bridge_mask:-""}
bridge_gw=${bridge_gw:-""}

# Função para exibir informações de ajuda
show_help() {
    cat <<-EOF
    Uso: $0 [opções]

    Opções:
    -c|create|--create                        # Cria interface bridge $bridge_name e atribui IP automatico
    -c|create|--create [<IP>                  # Cria interface bridge $bridge_name e atribui IP informado
    -c|create|--create [<IP>] [<INTERFACE>]   # Cria interface bridge $bridge_name e atribui IP e usa a interface de rede especificado
    -r|remove|--remove                        # Remove interface bridge $bridge_name
    -s|restart|--restart                      # Reinicia a conexão de rede principal
    -h|help|--help                            # Mostra este Help
EOF
}

# Função para verificar se é Super Usuário
check_superuser() {
    if [ "$(id -u)" != "0" ]; then
        echo "Este parâmetro deve ser executado como superusuário (root)."
        exit 1
    fi
}

# Função para configurar o IP via DHCPD na Interface Bridge
dhcpcd_ip_bridge() {
    # Verifica se o comando dhclient Existe e então, executa
    if command -v dhclient >/dev/null; then
        /usr/bin/dhclient "$bridge_name"
        # Verifica se o comando dhcpcd Existe e então, executa
    elif command -v dhcpcd >/dev/null; then
        /usr/bin/dhcpcd "$bridge_name"
    else
        # Se dhclient ou dhcpcd não existirem, dá mensagem de erro e sai
        echo "Erro: Este script requer 'dhcpcd' ou 'dhclient' (Recomendável).."
        echo "Por favor, instale as dependências antes de executar o script."
        exit 1
    fi
}

# Função para selecionar a interface de rede
set_interfaces() {
    # Verifica se o usuário especificou a Interface manualmente ou se o arquivo contém um Interface
    if [ -n "$interfaces" ]; then
        main_interface="$interfaces"
        export main_interface
    else
        # Detecta automaticamente as interfaces de rede físicas (ethernet)
        interfaces=${interfaces:-"$(ip link show up | awk -F ': ' '/^[0-9]+:/ {print $2}' | grep -v '^lo$\|^vmnet\|^vnet\|^virbr\|^br')"}
        export interfaces
        # Seleciona a primeira interface detectada como a principal
        main_interface=$(echo "$interfaces" | head -n 1)
        export main_interface
        # Seleciona a rota da Interface detectada
        main_route="$(ip route show dev "$main_interface" | awk '/default/ {print $3}')"
        export main_route
        bridge_gw=${bridge_gw:-"$main_route"}
        export bridge_gw
        # Seleciona o IP da Interface detectada
        main_ip=$(ip addr show dev "$main_interface" | awk '/inet / {print $2}')
        export main_ip
    fi
}

# Função para configurar um IP livre ou especifico para a interface Bridge
set_bridge() {
    # Chama a função para setar a interface
    set_interfaces
    # Verifica se o usuário especificou um IP manualmente ou se o arquivo contém um IP
    if [ -n "$bridge_ip" ]; then
        ip_config="1"
        export ip_config
    #  else
    #     # Calcula o IP aumentado em 1 (maior que o IP da interface principal)
    #     main_ip1=$(echo "$main_ip" | cut -d '.' -f 1)
    #     main_ip2=$(echo "$main_ip" | cut -d '.' -f 2)
    #     main_ip3=$(echo "$main_ip" | cut -d '.' -f 3)
    #     main_ip_last_octet=$(echo "$main_ip" | cut -d '.' -f 4)
    #     main_ip_last_octet_soma="$((1 + main_ip_last_octet))"
    #     bridge_ip=${bridge_ip:-"$main_ip1.$main_ip2.$main_ip3.$main_ip_last_octet_soma/24"}
    #     bridge_mask=${bridge_mask:-""}
    #     bridge_gw=${bridge_gw:-"$main_route"}
    #     export bridge_gw
    fi
}

# Função para criar a interface Bridge
create_bridge() {
    # Chama a função para verificar se é superusuário
    check_superuser
    # Chama a função para setar a interface Bridge
    set_bridge
    # Crie uma nova ponte e altere seu estado para up:
    ip link add name "$bridge_name" type bridge
    ip link set dev "$bridge_name" up
    # Adiciona as interfaces físicas à Bridge
    for iface in $interfaces; do
        export iface
        # Para adicionar uma interface (por exemplo, eth0) à ponte, seu estado deve ser up: eth0
        ip link set "$iface" up
        # A adição da interface à ponte é feita definindo seu mestre como: bridge_name
        # Até aqui, a ponte já deve funcionar
        ip link set "$iface" master "$bridge_name"
    done
    # Chama a função para configurar IP na interface Bridge
    set_ip_bridge
}

# Função para configurar IP na interface Bridge
set_ip_bridge() {
    # Chama a função para verificar se é superusuário
    check_superuser
    if [ "$ip_config" == "1" ]; then
        # Configura o IP fixo na interface Bridge
        ip address add dev "$bridge_name" "$bridge_ip"
        # Configura a máscara na interface Bridge
        # shellcheck disable=SC2236
        if [ -n "$bridge_mask" ]; then
            ip address add dev "$bridge_name" "$bridge_mask"
        fi
        # Configura o Gateway na interface Bridge
        if [ -n "$bridge_gw" ]; then
            #ip route add default via "$bridge_gw"
            #ip route append default via "$bridge_gw" dev "$bridge_name"
            ip route add default via "$bridge_gw" dev "$bridge_name" metric 100
        fi
    else
        # Chama a função para configurar o IP via DHCPD na Interface Bridge
        dhcpcd_ip_bridge
    fi
    # Remover Default Gateway da interface de rede
    sudo ip route del default via "$bridge_gw" dev "$main_interface"
    # Remover IP da interface de rede
    sudo ip addr del "$main_ip" dev "$main_interface"
    # Exibe informações da interface de rede
    ip addr show "$main_interface"
    # Exibe as informações da interface Bridge
    ip addr show "$bridge_name"
    # Exibe as informações da rota
    ip route
    # Mostrar as bridges existentes e as interfaces associadas, usando o utilitário bridge (parte do iproute2).
    bridge link
}

# Função para remover a interface Bridge
remove_bridge() {
    # Chama a função para verificar se é superusuário
    check_superuser
    # Chama a função para setar a interface
    set_interfaces
    sudo ip link set "$bridge_name" down
    sudo brctl delif "$bridge_name" "$main_interface"
    sudo brctl delbr "$bridge_name"
    # Exibe informações da interface de rede
    ip addr show "$main_interface"
    # Exibe as informações da rota
    ip route
}

# Função para reiniciar a interface de rede
restart_connection() {
    # Chama a função para setar a interface
    set_interfaces
    local connection
    connection="$(nmcli -t -f GENERAL.CONNECTION device show "$main_interface" | cut -f "2" -d ":")"
    nmcli connection down "${connection}"
    nmcli connection up "${connection}"
}

# Verifica as opções e executa a função apropriada
case "$bridge_options" in
# Cria a interface bridge
create_bridge | create | --create | -c)
    create_bridge
    ;;
# Remove a interface bridge
remove_bridge | remove | --remove | -r)
    remove_bridge
    ;;
# Reinicia a conexão de rede principal
restart_bridge | restart | --restart | -s)
    restart_connection
    ;;
# Mostra o Help
help | --help | -h)
    show_help
    ;;
# Mostra o Help
*)
    show_help
    ;;
esac
