#!/usr/bin/env bash
## shellcheck disable=SC2119,SC2120,SC2128,SC2034,SC2005,SC2155

#debug
export PS4='${red}${0##*/}${green}[$FUNCNAME]${pink}[$LINENO]${reset} '
#set -x
#set -e
shopt -s extglob

#system
readonly APP="${0##*/}"
readonly _VERSION_='1.0.9-5'
readonly DEPENDENCIES=(ip nmcli tput gettext dhclient dhcpcd)

setVarColors() {
	# does the terminal support true-color?
	if [[ -n "$(command -v "tput")" ]]; then
		#tput setaf 127 | cat -v  			#capturar saida
		: "${reset=$(tput sgr0)}"
		: "${bold=$(tput bold)}"
		: "${underline=$(tput smul)}"   # Início do sublinhado
		: "${nounderline=$(tput rmul)}" # Fim do sublinhado
		: "${reverse=$(tput rev)}"      # Inverte as cores de fundo e texto

		# Definir as cores ANSI como variáveis
		: "${black=$(tput bold)$(tput setaf 0)}"
		: "${red=$(tput bold)$(tput setaf 196)}"
		: "${green=$(tput bold)$(tput setaf 2)}"
		: "${yellow=$(tput bold)$(tput setaf 3)}"
		: "${blue=$(tput setaf 4)}"
		: "${pink=$(tput setaf 5)}"
		: "${magenta=$(tput setaf 5)}"
		: "${cyan=$(tput setaf 6)}"
		: "${white=$(tput setaf 7)}"
		: "${gray=$(tput setaf 8)}"
		: "${orange=$(tput setaf 202)}"
		: "${purple=$(tput setaf 125)}"
		: "${violet=$(tput setaf 61)}"
		: "${light_red=$(tput setaf 9)}"
		: "${light_green=$(tput setaf 10)}"
		: "${light_yellow=$(tput setaf 11)}"
		: "${light_blue=$(tput setaf 12)}"
		: "${light_magenta=$(tput setaf 13)}"
		: "${light_cyan=$(tput setaf 14)}"
		: "${bright_white=$(tput setaf 15)}"
	else
		unsetVarColors
	fi
}

unsetVarColors() {
	unset reset
	unset bold underline nounderline reverse
	unset black red green yellow blue pink magenta cyan white gray orange purple violeta
	unset light_red light_green light_yellow light_blue light_magenta light_cyan bright_white
}

DOT() {
	printf "%s" "${blue}:: ${reset}"
}

die() {
	local msg="$1"
	shift
	printf "%-75s\n" "$(DOT)${bold}${red}$msg${reset}" >&2
	exit 1
}

checkDependencies() {
	local d
	local errorFound=false
	declare -a missing

	for d in "${DEPENDENCIES[@]}"; do
		if [[ -z $(command -v "$d") ]]; then
			errorFound=true
			missing+=("$d")
			printf '%s\n' "${red}ERRO${reset}: não encontrei o comando ${cyan}'$d'${reset}"
		fi
	done
	if $errorFound; then
		echo "${yellow}--------------IMPOSSÍVEL CONTINUAR-------------${reset}"
		echo "Esse script precisa dos comandos listados acima"
		echo "Instale-os e/ou verifique se estão no seu \$PATH"
		echo "${yellow}-----------------------------------------------${reset}"
		die "Execução abortada"
	fi
}

# Função para verificar se é root
check_superuser() {
	if [ "$(id -u)" != "0" ]; then
		die "$(gettext "Este parâmetro deve ser executado como root") ${yellow}root"
	fi
}

# Função para exibir informações de ajuda
show_help() {
	cat <<-EOF
		${red}${APP} v${_VERSION_}${reset}
		${red}Uso: ${reset}$APP ${cyan}[opções]${reset}

			${cyan}Opções:${reset}
			-c|create|--create                        ${cyan}# Cria interface bridge ${yellow}'$bridge_name'${cyan} e atribui IP automatico ${reset}
			-c|create|--create [<IP>                  ${cyan}# Cria interface bridge ${yellow}'$bridge_name'${cyan} e atribui IP informado ${reset}
			-c|create|--create [<IP>] [<INTERFACE>]   ${cyan}# Cria interface bridge ${yellow}'$bridge_name'${cyan} e atribui IP e interface de rede informados ${reset}
			-r|restart|--restart                      ${cyan}# Reinicia a conexão de rede principal e recria interface bridge ${yellow}'$bridge_name' ${reset}
			-s|stop|--stop                            ${cyan}# Remove interface bridge ${yellow}'$bridge_name' ${reset}
			-t|test|--test                            ${cyan}# Testa a conexão DNS, caso falhe a rede Bridge é reiniciada ${reset}
			-h|help|--help                            ${cyan}# Mostra este Help ${reset}
	EOF
}

# Função para configurar o IP via DHCPD na Interface Bridge
dhcpcd_ip_bridge() {
	# Verifica se o comando dhclient Existe e então, executa
	if command -v dhclient >/dev/null; then
		/usr/bin/dhclient "$bridge_name"
		# Verifica se o comando dhcpcd Existe e então, executa
	elif command -v dhcpcd >/dev/null; then
		/usr/bin/dhcpcd "$bridge_name"
	else
		# Se dhclient ou dhcpcd não existirem, dá mensagem de erro e sai
		echo "Erro: Este script requer 'dhcpcd' ou 'dhclient' (recomendável)"
		echo "Por favor, instale as dependências antes de executar o script."
		exit 1
	fi
}

# Função para selecionar a interface de rede
set_interfaces() {
	# Verifica se o usuário especificou a Interface manualmente ou se o arquivo contém um Interface
	if [ -n "$interfaces" ]; then
		main_interface="$interfaces"
		export main_interface
	else
		# Detecta automaticamente as interfaces de rede físicas (ethernet)
		interfaces=${interfaces:-"$(ip link show up | awk -F ': ' '/^[0-9]+:/ {print $2}' | grep -v '^lo$\|^vmnet\|^vnet\|^virbr\|^br')"}
		export interfaces
		# Seleciona a primeira interface detectada como a principal
		main_interface=$(echo "$interfaces" | head -n 1)
		export main_interface
		# Seleciona a rota da Interface detectada
		main_route="$(ip route show dev "$main_interface" | awk '/default/ {print $3}')"
		export main_route
		bridge_gw=${bridge_gw:-"$main_route"}
		export bridge_gw
		# Seleciona o IP da Interface detectada
		main_ip=$(ip addr show dev "$main_interface" | awk '/inet / {print $2}')
		export main_ip
	fi
}

# Função para configurar um IP livre ou especifico para a interface Bridge
set_bridge() {
	# Chama a função para setar a interface
	set_interfaces
	# Verifica se o usuário especificou um IP manualmente ou se o arquivo contém um IP
	if [ -n "$bridge_ip" ]; then
		ip_config="1"
		export ip_config
	#  else
	#     # Calcula o IP aumentado em 1 (maior que o IP da interface principal)
	#     main_ip1=$(echo "$main_ip" | cut -d '.' -f 1)
	#     main_ip2=$(echo "$main_ip" | cut -d '.' -f 2)
	#     main_ip3=$(echo "$main_ip" | cut -d '.' -f 3)
	#     main_ip_last_octet=$(echo "$main_ip" | cut -d '.' -f 4)
	#     main_ip_last_octet_soma="$((1 + main_ip_last_octet))"
	#     bridge_ip=${bridge_ip:-"$main_ip1.$main_ip2.$main_ip3.$main_ip_last_octet_soma/24"}
	#     bridge_mask=${bridge_mask:-""}
	#     bridge_gw=${bridge_gw:-"$main_route"}
	#     export bridge_gw
	fi
}

# Função para criar a interface Bridge
create_bridge() {
	# Chama a função para setar a interface Bridge
	set_bridge
	# Crie uma nova ponte e altere seu estado para up:
	ip link add name "$bridge_name" type bridge
	ip link set dev "$bridge_name" up
	# Adiciona as interfaces físicas à Bridge
	for iface in $interfaces; do
		export iface
		# Para adicionar uma interface (por exemplo, eth0) à ponte, seu estado deve ser up: eth0
		ip link set "$iface" up
		# A adição da interface à ponte é feita definindo seu mestre como: bridge_name
		# Até aqui, a ponte já deve funcionar
		ip link set "$iface" master "$bridge_name"
	done
	# Chama a função para configurar IP na interface Bridge
	set_ip_bridge
}

# Função para configurar IP na interface Bridge
set_ip_bridge() {
	if [ "$ip_config" == "1" ]; then
		# Configura o IP fixo na interface Bridge
		ip address add dev "$bridge_name" "$bridge_ip"
		# Configura a máscara na interface Bridge
		# shellcheck disable=SC2236
		if [ -n "$bridge_mask" ]; then
			ip address add dev "$bridge_name" "$bridge_mask"
		fi
		# Configura o Gateway na interface Bridge
		if [ -n "$bridge_gw" ]; then
			#ip route add default via "$bridge_gw"
			#ip route append default via "$bridge_gw" dev "$bridge_name"
			ip route add default via "$bridge_gw" dev "$bridge_name" metric 100
		fi
	else
		# Chama a função para configurar o IP via DHCPD na Interface Bridge
		dhcpcd_ip_bridge
	fi
	# Remover Default Gateway da interface de rede
	sudo ip route del default via "$bridge_gw" dev "$main_interface"
	# Remover IP da interface de rede
	sudo ip addr del "$main_ip" dev "$main_interface"
	# Exibe informações da interface de rede
	ip addr show "$main_interface"
	# Exibe as informações da interface Bridge
	ip addr show "$bridge_name"
	# Exibe as informações da rota
	ip route
	# Mostrar as bridges existentes e as interfaces associadas, usando o utilitário bridge (parte do iproute2).
	bridge link
}

# Função para remover a interface Bridge
remove_bridge() {
	# Chama a função para setar a interface
	set_interfaces
	sudo ip link set "$bridge_name" down
	sudo brctl delif "$bridge_name" "$main_interface"
	sudo brctl delbr "$bridge_name"
	# Exibe informações da interface de rede
	ip addr show "$main_interface"
	# Exibe as informações da rota
	ip route
}

# Função para reiniciar a interface de rede
restart_connection() {
	# Chama a função para setar a interface
	set_interfaces
	local connection
	connection="$(nmcli -t -f GENERAL.CONNECTION device show "$main_interface" | cut -f "2" -d ":")"
	nmcli connection down "${connection}"
	nmcli connection up "${connection}"
}

test_connection() {
	while true; do
		if ping "$host_dns" -c 1 &>>/dev/null; then
			sleep "$host_time"
		else
			# Reinicia a conexão de rede principal e bridge
			check_superuser # Chama a função para verificar se é superusuário
			remove_bridge
			restart_connection
			create_bridge
		fi
	done
}

# Função para desativar o wakeup da interface de rede
disable_wakeup() {
    file_path="/sys/class/net/$main_interface/device/power/wakeup"
    local file_path
    # Verifica se o arquivo existe
    if [ -f "$file_path" ]; then
        # Se o arquivo existir, execute o comando
        echo "disabled" | tee "$file_path"
    fi
}

setVarColors
checkDependencies

# Arquivo environment para configuração de IP FIXO para a Interface Bridge
if [[ -f "/opt/bridge-set/bridge-set.conf" ]]; then
	# shellcheck source=/dev/null
	source /opt/bridge-set/bridge-set.conf
fi

# Variávis para a configuração da Interface Bridge
bridge_options="$1"
bridge_name="${bridge_name:-br0}"
bridge_ip="${bridge_ip:-$2}"
interfaces="${interfaces:-$3}"
bridge_mask=${bridge_mask:-""}
bridge_gw=${bridge_gw:-""}
host_dns=${host_dns:-cloudflare.com}
host_time=${host_time:-60}

# Verifica as opções e executa a função apropriada
case "$bridge_options" in
# Cria a interface bridge
create_bridge | create | --create | -c)
	check_superuser # Chama a função para verificar se é superusuário
	restart_connection
	create_bridge
  disable_wakeup
	test_connection &
	;;
# Remove a interface bridge
stop_bridge | stop | --stop | -s)
	check_superuser # Chama a função para verificar se é superusuário
	remove_bridge
	restart_connection
	;;
# Reinicia a conexão de rede principal
restart_connection | restart | --restart | -r)
	# restart_connection
	# ;;
	# Reinicia a conexão de rede principal e bridge
	# restart_bridge_all | restart-all | --restart-all | -ra)
	check_superuser # Chama a função para verificar se é superusuário
	remove_bridge
	restart_connection
	create_bridge
	;;
# Testa a conexão DNS, caso falhe a rede Bridge é reiniciada
test_connection | test | --test | -t)
	test_connection
	;;
*)
	show_help
	;;
esac
