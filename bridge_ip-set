#!/bin/bash
# shellcheck disable=SC2119
# shellcheck disable=SC2120

# Verifica se os comandos necessários estão disponíveis
if ! command -v ip >/dev/null || ! command -v nmcli >/dev/null; then
    echo "Erro: Este script requer 'iproute2' e 'NetworkManager'.."
    echo "Por favor, instale as dependências antes de executar o script."
    exit 1
fi

if [ -f "/opt/bridge_ip/bridge_ip.conf" ]; then
    # shellcheck source=/dev/null
    source /opt/bridge_ip/bridge_ip.conf
fi

bridge_options=("$@")

set_interfaces() {
# Verifica se o usuário especificou a Interface manualmente ou se o arquivo contém um Interface
if [ -n "$2" ]; then
    interfaces="$2"
    main_interface="$interfaces"
    export main_interface
else

    # Detecta automaticamente as interfaces de rede físicas (ethernet)
    interfaces=${interfaces:-"$(ip link show up | awk -F ': ' '/^[0-9]+:/ {print $2}' | grep -v '^lo$\|^vmnet\|^vnet\|^virbr\|^br')"}
    export interfaces

    # Seleciona a primeira interface detectada como a principal
    main_interface=$(echo "$interfaces" | head -n 1)
    export main_interface

    # Seleciona a rota da Interface detectada
    main_route="$(ip route show dev "$main_interface" | awk '/default/ {print $3}')"
    export main_route
fi
}

set_bridge() {
# Verifica se o usuário especificou um IP manualmente ou se o arquivo contém um IP
if [ -n "$1" ]; then
    bridge_ip="$1"
    export bridge_ip
else
    # Calcula o IP aumentado em 1 (maior que o IP da interface principal)

    main_ip=$(ip addr show dev "$main_interface" | awk '/inet / {split($2, a, "/"); print a[1]}')
    main_ip1=$(echo "$main_ip" | cut -d '.' -f 1)
    main_ip2=$(echo "$main_ip" | cut -d '.' -f 2)
    main_ip3=$(echo "$main_ip" | cut -d '.' -f 3)
    main_ip_last_octet=$(echo "$main_ip" | cut -d '.' -f 4)
    main_ip_last_octet_soma="$((1 + main_ip_last_octet))"
    bridge_ip=${bridge_ip:-"$main_ip1.$main_ip2.$main_ip3.$main_ip_last_octet_soma/24"}
    bridge_mask=${bridge_mask:-""}
    bridge_gw=${bridge_gw:-"$main_route"}
    export bridge_gw
fi
}

create_bridge() {
# Cria uma interface bridge
ip link add br0 type bridge

# Adiciona as interfaces físicas à Bridge
for iface in $interfaces; do
    ip link set "$iface" master br0
    #ip link set $iface up
done

# Configura o IP fixo para a Bridge
ip address add dev br0 "$bridge_ip"

# Configura a máscara para a Bridge
# shellcheck disable=SC2236
if [ -z "$bridge_mask" ]; then
    ip address add dev br0 "$bridge_mask"
fi

# Configura o Gateway para a Bridge
if [ -z "$bridge_gw" ]; then
    sudo ip route add default via "$bridge_gw"
fi

# Ativa a bridge
ip link set br0 up

# Exibe as informações da bridge
ip addr show br0
}

remove_bridge() {
sudo ip link set br0 down
sudo brctl delif br0 "$main_interface"
sudo brctl delbr br0

}
# shellcheck disable=SC2128
if [ "$bridge_options" == "remove" ]; then
    set_interfaces
    remove_bridge
else
    set_interfaces 
    set_bridge
    create_bridge
fi
